#!/bin/bash

# Creates or updates symbolic links for formulae from a local copy of this
# repository (Homebrew formulae for TeXworks dependencies) in the user's
# Homebrew installation. This is especially helpful when these formulae are in
# active development and not simply tapped via 'brew tap <user>/<repository>'.
#
# Usage:
#
#   link-formulae [--unlink]

# Configuration.
formula_prefix=tw-
tap_prefix=uniqmartin-linked/homebrew-texworks

# Exits program with error message.
die() {
  echo "Error: ${*}" >&2
  exit 1
}

# Process arguments.
remove_only=
case "${#}:${1}" in
  0:)
    # Default mode of operation.
    ;;
  1:--unlink)
    remove_only=t
    ;;
  *)
    die "Usage: ${0##*/} [--unlink]"
    ;;
esac

# Determine our formula directory ('Formula' from repository root).
self="${0}"
[[ "${self}" = /* ]] \
  || self="${PWD}/${self}"
repo_dir="${self%/*}/.."
repo_dir="$(cd "${repo_dir}" && pwd)"
source_dir="${repo_dir}/Formula"
[[ -n "${source_dir}" && -d "${source_dir}" && -r "${source_dir}" ]] \
  || die "Expected '${source_dir}' to be a readable directory."

# Determine Homebrew prefix and location of formulae.
homebrew_prefix="$(brew --prefix)"
[[ -n "${homebrew_prefix}" && -d "${homebrew_prefix}" ]] \
  || die "Failed to determine Homebrew prefix."
formula_dir="${homebrew_prefix}/Library/Taps/${tap_prefix}"
if [[ ! -e "${formula_dir}" ]] ; then
  mkdir -p "${formula_dir}" \
    || die "Failed to create directory '${formula_dir}'."
fi
[[ -d "${formula_dir}" && -w "${formula_dir}" ]] \
  || die "Expected '${formula_dir}' to be a writable directory."

# Link our formulae.
ln_count=0
rm_count=0
echo "Source: ${source_dir}"
echo "Target: ${formula_dir}"
echo
echo "Symbols used:"
echo "  = link is already up-to-date"
echo "  * updating existing link"
echo "  + creating new link"
echo "  - removing existing link"
echo "  ! target exists and is not a symbolic link (conflict?)"
echo
[[ -n "${remove_only}" ]] \
  && echo "Unlinking formulae:" \
  || echo "Linking formulae:"
for source_file in "${source_dir}/${formula_prefix}"*.rb ; do
  # Skip non-existent source (e.g. when no file matches).
  [[ -e "${source_file}" ]] \
    || continue

  # Extract formula name from source file name and construct target file name.
  name="${source_file}"
  name="${name##*/}"
  name="${name%.rb}"
  target_file="${formula_dir}/${name}.rb"

  # Check, update/add symbolic links.
  let ++ln_count
  if [[ -L "${target_file}" ]] ; then
    if [[ -z "${remove_only}" ]] ; then
      old_source="$(readlink "${target_file}")"
      if [[ "${old_source}" = "${source_file}" ]] ; then
        echo "  = ${name}"
        continue
      fi
      echo "  * ${name}"
    else
      echo "  - ${name}"
    fi
    let ++rm_count
    rm "${target_file}" \
      || echo "    Failed to remove existing link for '${name}'." >&2
  elif [[ -e "${target_file}" ]] ; then
    echo "  ! ${name}"
    continue
  else
    [[ -z "${remove_only}" ]] \
      && echo "  + ${name}"
  fi
  [[ -n "${remove_only}" ]] \
    && continue
  ln -s "${source_file}" "${target_file}" \
    || echo "    Failed to create new link for '${name}'." >&2
done
if [[ "${ln_count}" -eq 0 ]] ; then
  echo "  (no formulae with prefix '${formula_prefix}' found)"
elif [[ -n "${remove_only}" && "${rm_count}" -eq 0 ]] ; then
  echo "  (nothing to unlink)"
fi

# Clean up, i.e. remove directories that should be empty now.
if [[ -n "${remove_only}" ]] ; then
  echo
  if rmdir "${formula_dir}" 2> /dev/null ; then
    echo "Removed directory '${formula_dir}'."
    if rmdir "${formula_dir%/*}" 2> /dev/null ; then
      echo "Removed directory '${formula_dir%/*}'."
    fi
  else
    echo "Failed to remove directory '${formula_dir}' (should be empty)."
  fi
fi
